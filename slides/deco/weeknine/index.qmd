---
title: "Understanding Literate Programming"
description: "Use literate programming for technical documentation"
date: "2025-10-27"
date-format: long
author: "Chezka Quinola,Hank Grefenstette"
execute:
  echo: true
format:
  revealjs:
    completion: true
    theme: default
    css: ../../css/styles.css
    history: false
    scrollable: true
    transition: slide
    highlight-style: github
    footer: "Prosegrammers"
---

## What is Literate Programming?

Literate programming is a prosegramming method invented by Donald Knuth, where
code is written as a "human-readable narrative".

* The code explains why and how a program works, not just what it does
* This is done by prioritizing human legibility

## Human-first design

* Prioritizes clarity over conciseness
* Encourages writing as if teaching another person
* The order of explanation follows whatever is more easily readable instead of
whatever is easier to compile

## Integrated documentation

* Documentation and code live in the same file
* The narrative drives the code structure, not the other way around
* Avoids the common problem of out-of-date comments

## Code Extraction (Tangle) and Formatting (Weave)

A literate programming system typically supports two main processes that
transform a single source file into two different outputs:

* **Tangle:** Extracts the source code from the document, prioritizing
compilation or execution.
* **Weave:** Formats the document into a readable format like HTML or text,
prioritizing legibility.

## Modern Uses of Literate Programming

- **Jupyter Notebooks** – Python code with Markdown explanations and visualizations
- **R Markdown** – Combines R code, analysis, and formatted reports
- **Emacs Org-mode** – "Literate Emacs configurations"
- **Pweave / noweb** – General-purpose literate programming frameworks

## Benefits of Literate Programming

* **Improved readability:** Easier for others (and your future self) to
understand your code
* **Better debugging and maintenance:** Explaining logic helps spot errors early
* **Enhanced learning:** Writing a narrative reinforces understanding of
algorithms and data structures
* **Seamless reporting:** Code outputs and explanations can be presented
together

## Best Practices

* Write the narrative first, then insert the code chunks
* Use meaningful section headings to guide readers
* Keep code chunks small and focused
* Include examples, diagrams, and output where possible

## Challenges

* Requires discipline and extra effort upfront
* Can be verbose for very large projects
* Not all programming environments support literate programming natively
* Collaboration may be harder if team members are unfamiliar with the method

## Mini Demo: Literate Python Example

```{python}
# Calculate the average of a list

numbers = [10, 20, 30, 40, 50]

# Sum the numbers
total = sum(numbers)

# Count the numbers
count = len(numbers)

# Compute average
average = total / count

print(f"The average is {average}")
```

::: {.incremental style="margin-top: -0.2em; font-size: 0.775em;"}

- The `#` lines act like narrative sections in a literate program
- You can include explanations, reasoning, or formulas in plain text
- When run, only the actual Python code executes, but the narrative guides the reader

:::

## Takeaways

::: fragment

* Literate programming turns code into a story
* Prioritizes human understanding without sacrificing machine execution
* Modern tools like Jupyter and R Markdown make it accessible for everyday data
science and software projects
* Useful for teaching, research, and highly technical documentation

:::
